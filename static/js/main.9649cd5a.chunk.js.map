{"version":3,"sources":["components/navbar/Navbar.js","components/imageresults/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","href","ImageResults","imageListContent","images","this","props","className","map","img","title","tags","key","id","largeImageURL","target","src","alt","user","Component","Search","state","searchText","amount","apiUrl","apiKey","onTextChange","e","val","value","_this","setState","Object","defineProperty","name","fetch","concat","then","res","json","data","hits","catch","err","console","log","onAmountChange","onChange","placeholder","length","components_imageresults_ImageResults","App","navbar_Navbar","components_search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAoBeA,MAjBf,WACE,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,KACNH,EAAAC,EAAAC,cAAA,wBADF,4BC4BGE,0LA/BX,IAAIC,EACIC,EAAWC,KAAKC,MAAhBF,OAsBR,OAnBED,EADEC,EAEAN,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UACZH,EAAOI,IAAI,SAAAC,GAAG,OACbX,EAAAC,EAAAC,cAAA,OAAKU,MAAOD,EAAIE,KAAMC,IAAKH,EAAII,GAAIN,UAAU,gBAC3CT,EAAAC,EAAAC,cAAA,KAAGC,KAAMQ,EAAIK,cAAeC,OAAO,UACjCjB,EAAAC,EAAAC,cAAA,OAAKgB,IAAKP,EAAIK,cAAeG,IAAI,YAEnCnB,EAAAC,EAAAC,cAAA,qBACSS,EAAIE,KACXb,EAAAC,EAAAC,cAAA,WAFF,YAGWF,EAAAC,EAAAC,cAAA,cAASS,EAAIS,WAOb,KAEdpB,EAAAC,EAAAC,cAAA,WAAMG,UAzBUgB,cCoEZC,oNAnEbC,MAAQ,CACNC,WAAY,GACZC,OAAQ,EACRC,OAAQ,0BACRC,OAAQ,qCACRrB,OAAQ,MAGVsB,aAAe,SAAAC,GACb,IAAMC,EAAMD,EAAEZ,OAAOc,MACrBC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBL,EAAEZ,OAAOmB,KAAON,GAAO,WAC1B,KAARA,EACFE,EAAKC,SAAS,CAAE3B,OAAQ,KAExB+B,MAAK,gCAAAC,OAC6BN,EAAKT,MAAMI,OADxC,OAAAW,OAEDN,EAAKT,MAAMC,WAFV,+BAAAc,OAG2BN,EAAKT,MAAME,OAHtC,qBAKFc,KAAK,SAAAC,GACJA,EAAIC,OAAOF,KAAK,SAAAG,GACdV,EAAKC,SAAS,CAAE3B,OAAQoC,EAAKC,WAGhCC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,UAMtBG,eAAiB,SAAAnB,GACfG,EAAKC,SAAS,CAAER,OAAQI,EAAEZ,OAAOc,iFAMjC,OAFAe,QAAQC,IAAIxC,KAAKgB,MAAME,QACvBqB,QAAQC,IAAIxC,KAAKgB,MAAMjB,QAErBN,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UACbT,EAAAC,EAAAC,cAAA,SACEkC,KAAK,aACLL,MAAOxB,KAAKgB,MAAMC,WAClByB,SAAU1C,KAAKqB,aACfsB,YAAY,sBAEdlD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACEkC,KAAK,SACLL,MAAOxB,KAAKgB,MAAME,OAClBwB,SAAU1C,KAAKyC,gBAEfhD,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,KACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,IAAf,MACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,IAAf,MACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,IAAf,MACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,IAAf,OAEF/B,EAAAC,EAAAC,cAAA,WACCK,KAAKgB,MAAMjB,OAAO6C,OAAS,EAC1BnD,EAAAC,EAAAC,cAACkD,EAAD,CAAc9C,OAAQC,KAAKgB,MAAMjB,SAC/B,aA9DSe,cCYNgC,mLATX,OACErD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAACqD,EAAD,cALUlC,aCOEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.9649cd5a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <a href=\"#\">\r\n              <span>Pixabay </span>\r\n              Image Finder\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ImageResults.css\";\r\n\r\nclass ImageResults extends Component {\r\n  render() {\r\n    let imageListContent;\r\n    const { images } = this.props;\r\n\r\n    if (images) {\r\n      imageListContent = (\r\n        <div className=\"images\">\r\n          {images.map(img => (\r\n            <div title={img.tags} key={img.id} className=\"images--card\">\r\n              <a href={img.largeImageURL} target=\"_blank\">\r\n                <img src={img.largeImageURL} alt=\"photos\" />\r\n              </a>\r\n              <span>\r\n                Tags: {img.tags}\r\n                <br />\r\n                Photo by <strong>{img.user}</strong>\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    } else {\r\n      imageListContent = null;\r\n    }\r\n    return <div>{imageListContent}</div>;\r\n  }\r\n}\r\n\r\nImageResults.propTypes = {\r\n  images: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ImageResults;\r\n","import React, { Component } from \"react\";\r\nimport ImageResults from \"../imageresults/ImageResults\";\r\nimport \"./Search.css\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searchText: \"\",\r\n    amount: 5,\r\n    apiUrl: \"https://pixabay.com/api\",\r\n    apiKey: \"11829666-038b7b6a67a0d8e8e64857a66\",\r\n    images: []\r\n  };\r\n\r\n  onTextChange = e => {\r\n    const val = e.target.value;\r\n    this.setState({ [e.target.name]: val }, () => {\r\n      if (val === \"\") {\r\n        this.setState({ images: [] });\r\n      } else {\r\n        fetch(\r\n          `https://pixabay.com/api/?key=${this.state.apiKey}&q=${\r\n            this.state.searchText\r\n          }&image_type=photo&per_page=${this.state.amount}&safesearch=true`\r\n        )\r\n          .then(res => {\r\n            res.json().then(data => {\r\n              this.setState({ images: data.hits });\r\n            });\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  onAmountChange = e => {\r\n    this.setState({ amount: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.amount);\r\n    console.log(this.state.images);\r\n    return (\r\n      <div className=\"search\">\r\n        <input\r\n          name=\"searchText\"\r\n          value={this.state.searchText}\r\n          onChange={this.onTextChange}\r\n          placeholder=\"Search For Images\"\r\n        />\r\n        <br />\r\n        <select\r\n          name=\"amount\"\r\n          value={this.state.amount}\r\n          onChange={this.onAmountChange}\r\n        >\r\n          <option value={5}>5</option>\r\n          <option value={10}>10</option>\r\n          <option value={15}>15</option>\r\n          <option value={30}>30</option>\r\n          <option value={50}>50</option>\r\n        </select>\r\n        <br />\r\n        {this.state.images.length > 0 ? (\r\n          <ImageResults images={this.state.images} />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./components/navbar/Navbar.js\";\r\nimport Search from \"./components/search/Search.js\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <Search />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}